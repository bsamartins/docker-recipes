services:
  kafka:
    extends:
      file: ../kafka/docker-compose.yaml
      service: kafka
  kafkaui:
    extends:
      file: ../kafka/docker-compose.yaml
      service: kafkaui
  debezium:
    image: debezium/server:latest
    links:
      - postgres
      - kafka
    depends_on:
      - postgres
      - kafka
    environment:
      quarkus.log.console.json: false

      kafka.bootstrap.servers: kafka:9094

      debezium.sink.type: kafka
      # need to escape $ with $
      debezium.sink.kafka.producer.bootstrap.servers: $${kafka.bootstrap.servers}
      debezium.sink.kafka.producer.key.serializer: org.apache.kafka.common.serialization.StringSerializer
      debezium.sink.kafka.producer.value.serializer: org.apache.kafka.common.serialization.StringSerializer
      debezium.source.connector.class: io.debezium.connector.postgresql.PostgresConnector
      debezium.source.offset.storage.file.filename: data/offsets.dat
      #look into this later
      #debezium.source.offset.storage: org.apache.kafka.connect.storage.KafkaOffsetBackingStore
      #debezium.source.offset.storage.topic: debezium.offset.store.${debezium.source.database.server.name}
      debezium.source.bootstrap.servers: $${kafka.bootstrap.servers}
      debezium.source.offset.flush.interval.ms: 0
      debezium.source.database.hostname: postgres
      debezium.source.database.port: 5432
      debezium.source.database.user: postgres
      debezium.source.database.password: postgres
      debezium.source.database.dbname: postgres
      debezium.source.database.server.name: demo-debezium-server
      debezium.source.plugin.name: pgoutput
      debezium.source.schema.include.list: postgres
  postgres:
    image: postgres:alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - 5432:5432
    volumes:
      - ./postgres-init.sql:/docker-entrypoint-initdb.d/postgres-init.sql

